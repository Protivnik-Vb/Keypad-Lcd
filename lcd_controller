--------------------------------------------------------------------------------
--
--   FileName:         lcd_controller.vhd
--   Dependencies:     None
--   Design Software:  ISE DESIGN 14.7 Build 173 SJ Full Version
--		Version 1.0 10/11/2019 Vineeth Babu
--
--   CLOCK FREQUENCY: to change system clock frequency, change Line 65
--
--   LCD INITIALIZATION SETTINGS: to change, comment/uncomment lines:
--
--   Function Set  
--      2-line mode, display on             Line 93    lcd_data <= "00111100";
--      1-line mode, display on             Line 94    lcd_data <= "00110100";
--      1-line mode, display off            Line 95    lcd_data <= "00110000";
--      2-line mode, display off            Line 96    lcd_data <= "00111000";
--   Display ON/OFF
--      display on, cursor off, blink off   Line 104   lcd_data <= "00001100";
--      display on, cursor off, blink on    Line 105   lcd_data <= "00001101";
--      display on, cursor on, blink off    Line 106   lcd_data <= "00001110";
--      display on, cursor on, blink on     Line 107   lcd_data <= "00001111";
--      display off, cursor off, blink off  Line 108   lcd_data <= "00001000";
--      display off, cursor off, blink on   Line 109   lcd_data <= "00001001";
--      display off, cursor on, blink off   Line 110   lcd_data <= "00001010";
--      display off, cursor on, blink on    Line 111   lcd_data <= "00001011";
--   Entry Mode Set
--      increment mode, entire shift off    Line 127   lcd_data <= "00000110";
--      increment mode, entire shift on     Line 128   lcd_data <= "00000111";
--      decrement mode, entire shift off    Line 129   lcd_data <= "00000100";
--      decrement mode, entire shift on     Line 130   lcd_data <= "00000101";
--    
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;

ENTITY lcd_controller IS
  PORT(
    clk        : IN    STD_LOGIC;  
    rw, rs, e  : OUT   STD_LOGIC;  --read/write, setup/data, and enable for lcd
    lcd_data   : OUT   STD_LOGIC_VECTOR(7 DOWNTO 0); --data signals for lcd
	 key1 : IN STD_LOGIC_VECTOR(7 DOWNTO 0); -- Data for the top line of the LCD
	 key2 : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
	 keypad_frequency :out integer:=0;
	 key_pll: IN  STD_LOGIC;
	 trigger : in std_logic);
END lcd_controller;

--------------power_up State 50ms before initaize
--------------initialize state consisist of (function set  wait 50us then display-on/off control  wait 50us then display-on/off control
--------------wait 50us  display clear wait 2 ms then entry set wait 60us  display clear )
--------------line5 for 4th FREQUENCY KEY PRESSES
--------------line1 for text-display
--------------line2 for 1ST FREQUENCY KEY PRESSES
--------------line3 for 2nd FREQUENCY KEY PRESSES
--------------line4 for 3rd FREQUENCY KEY PRESSES
--------------line5 for 4th FREQUENCY KEY PRESSES
--------------line6 for 5th FREQUENCY KEY PRESSES
--------------line7 for 6th FREQUENCY KEY PRESSES
--------------After initialize state FSM will be at ResetLine state and Send state
--------------RESETLINE Based on line address for the line is 

ARCHITECTURE controller OF lcd_controller IS
  TYPE CONTROL IS(power_up, initialize, RESETLINE, line0,line1, line2,line3,line4,line5,line6,line7,line8, send);--,enter
  SIGNAL    state      : CONTROL;
  CONSTANT  freq       : INTEGER := 50; --system clock frequency in MHz
  SIGNAL 	ptr     	  : natural range 0 to 20 := 19; -- To keep track of what character we are up to
  SIGNAL    txt_ptr    : natural range 0 to 16 := 15;
  SIGNAL    PLL_PTR    : natural range 0 to 19 := 18;
  SIGNAL    PLL_text    : natural range 0 to 8 := 7;
  SIGNAL 	line		  : integer := 0;
  signal count         : integer := 0;
--  signal keypad_frequency     : integer  := 0;
  signal line1_buffer : std_logic_vector(127 downto 0) := x"4652455155454e43593a353430302e30";
  signal line2_buffer : std_logic_vector(151 downto 0) := x"504C4C205354415455533A554E4C4F434B4544";
  signal pll_unlock  : std_logic_vector(63 downto 0) := x"554e4c4f434b4544";
  signal pll_lock  : std_logic_vector(63 downto 0) := x"20204c4f434b4544";

  signal thousnd_p,Hun_p,ten_p,one_p,zero_p  :integer:=0;

  
 attribute KEEP : string;
attribute KEEP of rw, rs, e ,thousnd_p,Hun_p,ten_p,one_p,zero_p,keypad_frequency,key2: signal is "TRUE";
 
  
BEGIN
  PROCESS(clk)
    VARIABLE clk_count : INTEGER  := 0; --event counter for timing
  BEGIN
  IF(clk'EVENT and clk = '1') THEN
    
      CASE state IS
        
        --wait 50 ms to ensure Vdd has risen and required LCD wait is met
        WHEN power_up =>
          IF(clk_count < (50000 * freq)) THEN    --wait 50 ms
            clk_count := clk_count + 1;
            state <= power_up;
          ELSE                                   --power-up complete
            clk_count := 0;
            rs <= '0';
            rw <= '0';
            lcd_data <= "00110000";
            state <= initialize;
          END IF;
          
        --cycle through initialization sequence  
        WHEN initialize =>
          clk_count := clk_count + 1;
          IF(clk_count < (10 * freq)) THEN       --function set
            lcd_data <= "00111100";      --2-line mode, display on
            --lcd_data <= "00110100";    --1-line mode, display on
            --lcd_data <= "00110000";    --1-line mdoe, display off
            --lcd_data <= "00111000";    --2-line mode, display off
            e <= '1';
            state <= initialize;
          ELSIF(clk_count < (60 * freq)) THEN    --wait 50 us
            lcd_data <= "00000000";
            e <= '0';
            state <= initialize;
          ELSIF(clk_count < (70 * freq)) THEN    --display on/off control
            lcd_data <= "00001111";      --display on, cursor off, blink off
            --lcd_data <= "00001101";    --display on, cursor off, blink on
            --lcd_data <= "00001110";    --display on, cursor on, blink off
            --lcd_data <= "00001111";    --display on, cursor on, blink on
            --lcd_data <= "00001000";    --display off, cursor off, blink off
            --lcd_data <= "00001001";    --display off, cursor off, blink on
            --lcd_data <= "00001010";    --display off, cursor on, blink off
            --lcd_data <= "00001011";    --display off, cursor on, blink on            
            e <= '1';
            state <= initialize;
          ELSIF(clk_count < (120 * freq)) THEN   --wait 50 us
            lcd_data <= "00000000";
            e <= '0';
            state <= initialize;
          ELSIF(clk_count < (130 * freq)) THEN   --display clear
            lcd_data <= "00000001";
            e <= '1';
            state <= initialize;
          ELSIF(clk_count < (2130 * freq)) THEN  --wait 2 ms
            lcd_data <= "00000000";
            e <= '0';
            state <= initialize;
          ELSIF(clk_count < (2140 * freq)) THEN  --entry mode set
            lcd_data <= "00000110";      --increment mode, entire shift off
            --lcd_data <= "00000111";    --increment mode, entire shift on
            --lcd_data <= "00000100";    --decrement mode, entire shift off
            --lcd_data <= "00000101";    --decrement mode, entire shift on
            e <= '1';
            state <= initialize;
          ELSIF(clk_count < (2200 * freq)) THEN  --wait 60 us
            lcd_data <= "00000000";
            e <= '0';
            state <= initialize;
          ELSE                                   --initialization complete
            clk_count := 0;
            state <= RESETLINE;
          END IF;    
			 
		  WHEN resetline =>
			 ptr <= 1;
			 txt_ptr<=16;
			 PLL_PTR <= 19;
			 pll_text  <= 8;
			 if line = 0 then
		      lcd_data <= x"C2";
            rs <= '0';
            rw <= '0';
            clk_count := 0; 
            state <= send;
			  elsif(line =1) then
			   lcd_data <= X"94";
            rs <= '0';
            rw <= '0';
            clk_count := 0; 
            state <= send;	
			 elsif(line =2) then
			   lcd_data <= X"CC";
            rs <= '0';
            rw <= '0';
            clk_count := 0; 
            state <= send;
			 elsif(line =3) then
			   lcd_data <= X"CD";
            rs <= '0';
            rw <= '0';
            clk_count := 0; 
            state <= send;			
			elsif(line =4) then
			   lcd_data <= X"CE";
            rs <= '0';
            rw <= '0';
            clk_count := 0; 
            state <= send;
			elsif(line =5) then
			   lcd_data <= X"CF";
            rs <= '0';
            rw <= '0';
            clk_count := 0; 
            state <= send;			
				
			 elsif(line =6) then
			   lcd_data <= X"D0";
            rs <= '0';
            rw <= '0';
            clk_count := 0; 
            state <= send;	
				
			 elsif(line =7) then
			   lcd_data <= X"D1";
            rs <= '0';
            rw <= '0';
            clk_count := 0; 
            state <= send;	
			 elsif(line =8) then
			   lcd_data <= X"9F";
            rs <= '0';
            rw <= '0';
            clk_count := 0; 
            state <= send;					
				
			 end if;
     	    
        WHEN line0 =>		
				line <= 0;
				lcd_data <= line1_buffer(txt_ptr*8 + 7 downto txt_ptr*8);
				--lcd_data <= x"20";
            rs <= '1';
            rw <= '0';
            clk_count := 0; 
				line <= 0;
            state <= send;
				
			WHEN line1 =>		
				line <= 1;
				--lcd_data <= line2_buffer(PLL_PTR*8 + 7 downto PLL_PTR*8);
				--lcd_data <= x"20";
            rs <= '1';
            rw <= '0';
            clk_count := 0; 
				line <= 1;
            state <= send;			

				
		  WHEN line2 =>
		  IF(trigger = '1') THEN
		   IF(COUNT =0) THEN		   
				line <= 2;
				lcd_data <= key1;
				thousnd_p<= conv_integer(unsigned( key1 - x"30"));			
            rs <= '1';
            rw <= '0';
            clk_count := 0;            
            state <= send;
				COUNT<=COUNT+1;
		     END IF;
			  --display_data1 <=lcd_data(7 downto 0) &x"000000" ;
			 end if;
		WHEN line3 =>
		 IF(trigger = '1') THEN
		  IF(COUNT =1) THEN		
				line <= 3;
				lcd_data <= key1;
				Hun_p<=  conv_integer(unsigned( key1 - x"30"));
            rs <= '1';
            rw <= '0';
            clk_count := 0;            
            state <= send;
				COUNT<=COUNT+1;
		END IF;
		--display_data2 <= lcd_data(7 downto 0)  &x"0000" ;
			 end if;
	   WHEN line4 =>
		IF(trigger = '1') THEN
		  IF(COUNT =2) THEN		
				line <= 4;
				lcd_data <= key1;
				ten_p <= conv_integer(unsigned( key1 - x"30"));
            rs <= '1';
            rw <= '0';
            clk_count := 0;            
            state <= send;
				COUNT<=COUNT+1;
			 END IF;	
			 --display_data3 <=lcd_data(7 downto 0) &x"00" ;
	       end if;		

		WHEN line5 =>
		IF(trigger = '1') THEN
		  IF(COUNT =3) THEN
				line <= 5;
				lcd_data <= key1;
				one_p <=  conv_integer(unsigned( key1 - x"30"));
            rs <= '1';
            rw <= '0';
            clk_count := 0;            
            state <= send;
				COUNT<=COUNT+1;
				
			 END IF;				
	       end if;
			 
			 
		WHEN line6 =>
		IF(trigger = '1') THEN
		  IF(COUNT =4) THEN		
				line <= 6;
				lcd_data <= x"2E";
				--ten_p <= conv_integer(unsigned( key1 - x"30"));
            rs <= '1';
            rw <= '0';
            clk_count := 0;            
            state <= send;
				COUNT<=COUNT+1;
			 END IF;	
			 --display_data3 <=lcd_data(7 downto 0) &x"00" ;
	       end if;		

		WHEN line7 =>               ---exponent
		IF(trigger = '1') THEN
		  IF(COUNT =5) THEN
				line <= 7;
				lcd_data <= key1;
				zero_p <=  conv_integer(unsigned( key1 - x"30"));
            rs <= '1';
            rw <= '0';
            clk_count := 0;            
            state <= send;
				COUNT<=0;
				
			 END IF;				
	       end if;	 
			 
			 
			 WHEN line8 =>             ---pll status 

				line <= 8;
				if(key_pll = '0') then
			--	lcd_data <= pll_unlock (PLL_text*8 + 7 downto PLL_text*8);
				else
			--	lcd_data <= pll_lock (PLL_text*8 + 7 downto PLL_text*8);
				end if;
            rs <= '1';
            rw <= '0';
            clk_count := 0;            
            state <= send;
			
		
			 
			 if(key2 = x"0D") then							
						keypad_frequency<=((10000 * thousnd_p) + (hun_p * 1000) +( ten_p * 100 )+ (one_p * 10) + (zero_p * 1));	
				  end if;
				  
			 
		  
		  
		  
        --send instruction to lcd        
        WHEN send =>
			  IF(clk_count < (50 * freq)) THEN  --do not exit for 50us
				  IF(clk_count < freq) THEN      --negative enable
					e <= '0';
				  ELSIF(clk_count < (14 * freq)) THEN  --positive enable half-cycle
					e <= '1';
				  ELSIF(clk_count < (27 * freq)) THEN  --negative enable half-cycle
					e <= '0';
				  END IF;
				  clk_count := clk_count + 1;
				  state <= send;
			  ELSE
			  	  clk_count := 0;
				  if (line = 0 )then
					   if txt_ptr = 0 then
							line <= 1;
							state <= resetline;
						else
							txt_ptr <= txt_ptr - 1;
							state <= line0;
						end if;
						
				   elsif(line = 1) then				    
						if PLL_PTR = 0 then
							line <= 2;
							state <= resetline;
						else
							PLL_PTR <= PLL_PTR - 1;
							state <= line1;
						end if;		
						
				  elsif(line = 2) then				    
						if ptr = 2 then
							line <= 3;
							state <= resetline;						 	
						else
							ptr <= ptr + 1;
							state <= line2;
						end if;
						
					elsif(line = 3) then
						if ptr = 2 then
							line <= 4;
							state <= resetline;
						else
							ptr <= ptr + 1;
							state <= line3;
						end if;	
					elsif(line = 4) then
						if ptr = 2 then
							line <= 5;							
							state <= resetline;							
						else
							ptr <= ptr + 1;
							state <= line4;
						end if;
						
					elsif(line = 5) then
						if ptr = 2 then
							line <= 6;							
							state <= resetline;		
								
						else
							ptr <= ptr + 1;
							state <= line5;
						end if;
						
					elsif(line = 6) then
						if ptr = 2 then
							line <= 7;							
							state <= resetline;							
						else
							ptr <= ptr + 1;
							state <= line6;
						end if;
						
					elsif(line = 7) then
						if ptr = 2 then
							line <= 8;							
							state <= resetline;		
								
						else
							ptr <= ptr + 1;
							state <= line7;
						end if;	
						
						elsif(line = 8) then
						if pll_text = 0 then
							line <= 2;							
							state <= resetline;		
								
						else
							pll_text<= pll_text - 1;
							state <= line8;
						end if;

				  end if;
						keypad_frequency<=((10000 * thousnd_p) + (hun_p * 1000) +( ten_p * 100 )+ (one_p * 10) + (zero_p * 1));	
		
							
			  END IF;

      END CASE;    
    

    END IF;
  END PROCESS;
END controller;
